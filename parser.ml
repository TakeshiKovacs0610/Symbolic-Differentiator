type token =
  | X
  | INT of (int)
  | CONST of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | POW
  | SIN
  | COS
  | TAN
  | SEC
  | CSC
  | COT
  | LOG
  | EXP
  | RPAREN
  | LPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
    type exp = 
        | Add of exp * exp
        | Sub of exp * exp
        | Mul of exp * exp
        | Div of exp * exp
        | Pow of exp * exp 
        | Sin of exp
        | Cos of exp
        | Tan of exp
        | Sec of exp
        | Csc of exp
        | Cot of exp
        | Exp of exp
        | Minus of exp
        | Num of int
        | Log of exp
        | X
        | Const of string
# 44 "parser.ml"
let yytransl_const = [|
  257 (* X *);
  260 (* ADD *);
  261 (* SUB *);
  262 (* MUL *);
  263 (* DIV *);
  264 (* POW *);
  265 (* SIN *);
  266 (* COS *);
  267 (* TAN *);
  268 (* SEC *);
  269 (* CSC *);
  270 (* COT *);
  271 (* LOG *);
  272 (* EXP *);
  273 (* RPAREN *);
  274 (* LPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  258 (* INT *);
  259 (* CONST *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\003\000\003\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\020\000\021\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\010\000\013\000\011\000\012\000\015\000\
\016\000\017\000\018\000\014\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\002\000\003\000\005\000\006\000\
\008\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\019\000\020\000"

let yysindex = "\255\255\
\005\255\000\000\000\000\000\000\000\000\005\255\005\255\005\255\
\005\255\005\255\005\255\005\255\005\255\005\255\005\255\000\000\
\255\254\006\255\003\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\255\005\255\005\255\
\005\255\005\255\005\255\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\005\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\250\255\003\000\243\255\021\000\000\000"

let yytablesize = 278
let yytable = "\001\000\
\007\000\001\000\031\000\032\000\004\000\003\000\004\000\005\000\
\030\000\006\000\035\000\033\000\034\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\041\000\015\000\036\000\
\037\000\038\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\039\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\007\000\007\000\007\000\
\004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\001\000\000\000\000\000\004\000"

let yycheck = "\001\000\
\000\000\000\000\004\001\005\001\000\000\001\001\002\001\003\001\
\015\000\005\001\008\001\006\001\007\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\035\000\018\001\017\001\
\031\000\032\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\033\000\034\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\017\001\255\255\255\255\017\001"

let yynames_const = "\
  X\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  POW\000\
  SIN\000\
  COS\000\
  TAN\000\
  SEC\000\
  CSC\000\
  COT\000\
  LOG\000\
  EXP\000\
  RPAREN\000\
  LPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  CONST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 46 "parser.mly"
      ( _1 )
# 217 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 47 "parser.mly"
              ( Add(_1, _3) )
# 225 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 48 "parser.mly"
              ( Sub(_1, _3) )
# 233 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 51 "parser.mly"
      ( _1 )
# 240 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 52 "parser.mly"
              ( Mul(_1, _3) )
# 248 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 53 "parser.mly"
              ( Div(_1, _3) )
# 256 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 56 "parser.mly"
      ( _1 )
# 263 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 57 "parser.mly"
               ( Pow(_1, _3) )
# 271 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : exp) in
    Obj.repr(
# 60 "parser.mly"
                    ( _2 )
# 278 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 61 "parser.mly"
        ( _1)
# 285 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 62 "parser.mly"
            ( Sin(_2) )
# 292 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 63 "parser.mly"
            ( Cos(_2) )
# 299 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 64 "parser.mly"
            ( Minus(_2) )
# 306 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 65 "parser.mly"
            ( Log(_2) )
# 313 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 66 "parser.mly"
            ( Tan(_2) )
# 320 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 67 "parser.mly"
            ( Sec(_2) )
# 327 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 68 "parser.mly"
            ( Csc(_2) )
# 334 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 69 "parser.mly"
            ( Cot(_2) )
# 341 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 70 "parser.mly"
            ( Exp(_2) )
# 348 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
        ( X )
# 354 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
          ( Num(_1) )
# 361 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
            ( Const(_1) )
# 368 "parser.ml"
               : exp))
(* Entry e *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let e (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : exp)
